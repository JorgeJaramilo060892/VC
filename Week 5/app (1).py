# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LKTr6yhUCkO-9_bM6Iyy8DspKD0G38uF

# Week 5
Task:

1. Select any toy data (simple data) ( You are allowed to use data set of week 4)

2. Save the model ( You are allowed to use model of week 4)

3. Deploy the model on any cloud eg: Heroku,AWS,GCP,Azure (Deployment should be API based as well as web app)

4. Create pdf document (Name, Batch code, Submission date, Submitted to ) which should contain snapshot of each step of deployment)

5. Upload the document and code to Github

6. Submit the URL of the uploaded document.

Use free credits(trial or student account) of AWS, GCP, Azure to deploy the app.

### Importing libraries and DataSet
"""

!pip install reportlab

from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import joblib
import os

sns.set_style("whitegrid") # displays the position grid in the graphs
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None) # This option allows all columns in the dataset to be displayed.
# all columns in the dataset
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

"""### 1.- Select any toy data"""

data = load_diabetes()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target
print(df.describe())

print(f"\n {data.DESCR}")

"""### EDA"""

df.rename(columns={'s1':'tc','s2':'ldl','s3':'hdl','s4':'tch','s5':'ltg','s6':'glu'}, inplace=True)

print(df)

df.isnull().sum()

df.shape

df.head()

"""### Data Visualization"""

# Let's see the relationship beetween  low-density lipoproteins (LDL) and (BMI)body mass index
sns.scatterplot(x='bmi',y='ldl', palette='Pastel1', data=df)
plt.title('Relationship Beetween LDL and BMI')
plt.xlabel('Body Mass Index (bmi)')
plt.ylabel('Low-Density-Lipoproteins(ldl)')
plt.show()

#  Scatterplot with categorical labels (dummy)
#fig = plt.subplots(figsize=(10, 5))
data = df # Our data
class_l = np.random.randint(2, size=len(data))
data_with_class = data.copy()
data_with_class['class'] = class_l
sns.scatterplot(data=data_with_class, x='bmi', y='ldl', palette='Pastel1', legend='full', hue='class')
plt.title('Relationship Beetween LDL and BMI')
plt.xlabel('Body Mass Index (bmi)')
plt.ylabel('Low-Density-Lipoproteins(ldl)')
plt.show()

import plotly.express as px
df_l = data_with_class[['age', 'bmi', 'ldl', 'class']]
fig=px.scatter_matrix(
    df_l,
    dimensions=['age','bmi','ldl'], color='class',
    color_discrete_map={'0': 'red', '1': 'blue'}
)
# style customization
fig.update_traces(marker=dict(size=5, opacity=0.7), selector=dict(mode='markers'))
fig.update_layout(title='Pair chart with Plotly')

# show the graph
fig.show()

"""### 2.- Training a simple model

###### As you will have noticed, this dataset has been previously normalized to facilitate the application of certain machine learning models.
"""

X = df.drop('target', axis=1)
y = df['target']

model = LinearRegression()

model.fit(X, y)

"""### 3.- Saving the model"""

joblib.dump(model, 'diabetes_model.joblib')

"""### 4.- Let's create a PDF"""

from google.colab import files
def create_pdf():
    c = canvas.Canvas("Deployment_Steps_Diabetes.pdf", pagesize=letter)
    c.drawString(100, 750, "Deployment Steps:")

    # Let's add DataFrame description to the PDF
    c.drawString(100, 730, "1. Data Exploration:")
    table_data=[]
    for index, row in df.describe().iterrows():
      table_data.append([index]+row.tolist())

    table = pd.DataFrame(table_data, columns=['Statistic']+ df.columns.tolist()).round(3)
    table_str = table.to_string(index=False)

    lines=table_str.split('\n')
    y_position = 750
    for line in lines:
      c.drawString(120, y_position, line)
      y_position -=10


   # Let's add visualization (e.g. a correlation chart)
    c.drawString(100, y_position - 20, "2. Correlation Heatmap")
    plt.figure(figsize=(10,6))
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
    plt.title('Correlation Heatmap')
    plt.savefig('correlation_heatmap.png')


    # Save PDF
    plt.savefig('correlation_heatmap.png', format='png')
    c.drawImage('correlation_heatmap.png', 100, 500, width=400, height=300)
    c.showPage()
    c.save()

# Call function to create PDF
create_pdf()

# Download PDF and Images Generated
files.download("Deployment_Steps_Diabetes.pdf")
files.download("correlation_heatmap.png")

!pip install heroku
!pip install flask

import joblib

# Guardar el modelo
joblib.dump(model, 'diabetes_model.joblib')

!pip install flask

from flask import Flask, render_template, request
import joblib

app = Flask(__name__)

# Cargar el modelo
model = joblib.load('diabetes_model.joblib')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    features = [float(x) for x in request.form.values()]
    prediction = model.predict([features])

    return render_template('index.html', prediction_text=f'The prediction is {prediction[0]}')

if __name__ == '__main__':
    app.run(debug=True)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diabetes Prediction</title>
</head>
<body>
    <h1>Diabetes Prediction</h1>
    <form action="/predict" method="post">
        <label for="features">Enter features:</label>
        <input type="text" name="features" required>
        <button type="submit">Predict</button>
    </form>
    {% if prediction_text %}
        <p>{{ prediction_text }}</p>
    {% endif %}
</body>
</html>